import datetime
import json
import re
import logging

import requests
from pyrogram import Client, filters

from core.bot_types import Module, Author, ModuleDatabase

log = logging.getLogger(__name__)

module = Module(
    name='string_id=module_name',
    version='v1.0.0',
    authors=Author('pelmeshke', telegram_username='@pelmeshke'),
    description='string_id=description',
    changelog={},
    strings={
        'ru': {
            'module_name': '–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ',
            'description': '–£–ø—Ä–∞–≤–ª—è–µ—Ç –∞–ª–∏–∞—Å–∞–º–∏ - —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è–º–∏ –∫–æ–º–∞–Ω–¥ –∏ –ø—Ä–æ—á–µ–≥–æ. /aliases - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∞–ª–∏–∞—Å—ã',

            'units_temp_metric': '¬∞C',
            'units_temp_imperial': '¬∞F',
            'units_temp_standard': 'K',
            'units_wind_metric': '–º/—Å',
            'units_wind_imperial': '–º–∏–ª—å/—á',
            'units_wind_standard': '–º/—Å',

            'wind_direction_0': '‚¨áÔ∏è–°',
            'wind_direction_45': '‚ÜôÔ∏è–°–í',
            'wind_direction_90': '‚¨ÖÔ∏è–í',
            'wind_direction_135': '‚ÜñÔ∏è–Æ–í',
            'wind_direction_180': '‚¨ÜÔ∏è–Æ',
            'wind_direction_225': '‚ÜóÔ∏è–Æ–ó',
            'wind_direction_270': '‚û°Ô∏è–ó',
            'wind_direction_315': '‚ÜòÔ∏è–°–ó',
            'wind_direction_360': '‚¨áÔ∏è–°',

            'good_morning': '–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, —Å–µ–≥–æ–¥–Ω—è {weekday}, {day} {month} {year} –≥–æ–¥–∞, '
                            '{time_hour}:{time_minute} {is_moscow_time}\n\n{weather_respond}',
            'good_afternoon': '–î–æ–±—Ä—ã–π –¥–µ–Ω—å, —Å–µ–≥–æ–¥–Ω—è {weekday}, {day} {month} {year} –≥–æ–¥–∞, '
                            '{time_hour}:{time_minute} {is_moscow_time}\n\n{weather_respond}',
            'good_evening': '–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä, —Å–µ–≥–æ–¥–Ω—è {weekday}, {day} {month} {year} –≥–æ–¥–∞, '
                            '{time_hour}:{time_minute} {is_moscow_time}\n\n{weather_respond}',
            'good_night': '–î–æ–±—Ä–æ–π –Ω–æ—á–∏, —Å–µ–≥–æ–¥–Ω—è {weekday}, {day} {month} {year} –≥–æ–¥–∞, '
                            '{time_hour}:{time_minute} {is_moscow_time}\n\n{weather_respond}',

            'moscow_time': '–ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏',
            'in_city': '–≤ –≥–æ—Ä–æ–¥–µ {city_name}',
            'enter_city': '–í–≤–µ–¥–∏—Ç–µ <code>/iamhere <–≤–∞—à –≥–æ—Ä–æ–¥></code>, —á—Ç–æ–±—ã —è –ø–æ–∫–∞–∑—ã–≤–∞–ª –ø–æ–≥–æ–¥—É',

            'today_template': '–¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞ {city_name}\n'
                              '\n'
                              '{emoji}{description}\n'
                              'üå°–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp_value} {temp_units}\n'
                              '‚úã–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {feels_like_value} {temp_units}\n'
                              'üí®–í–µ—Ç–µ—Ä: {wind_value} {wind_units}, {direction}\n'
                              'üíß–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity_value}%\n'
                              '‚òÅ–û–±–ª–∞—á–Ω–æ—Å—Ç—å: {clouds_value}%\n',

            'your_city_was_changed_to': '–í–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {city_name} (<code>{lat}, {lon}</code>)',


            'weather_emoji_Thunderstorm': 'üå©',
            'weather_emoji_Drizzle': 'üåß',
            'weather_emoji_Rain': 'üåß',
            'weather_emoji_Snow': 'üå®',
            'weather_emoji_Mist': 'üå´',
            'weather_emoji_Smoke': 'üå´',
            'weather_emoji_Haze': 'üå´',
            'weather_emoji_Fog': 'üå´',
            'weather_emoji_Dust': 'üå´',
            'weather_emoji_Sand': 'üå´',
            'weather_emoji_Ash': 'üå´',
            'weather_emoji_Squall': 'üí®',
            'weather_emoji_Tornado': 'üå™',
            'weather_emoji_Clear': '‚òÄÔ∏è',
            'weather_emoji_Clouds': '‚õÖÔ∏è',

            'weather_type_200': '–ì—Ä–æ–∑–∞ —Å –Ω–µ–±–æ–ª—å—à–∏–º –¥–æ–∂–¥–µ–º',
            'weather_type_201': '–ì—Ä–æ–∑–∞ —Å –¥–æ–∂–¥–µ–º',
            'weather_type_202': '–ì—Ä–æ–∑–∞ —Å —Å–∏–ª—å–Ω—ã–º –¥–æ–∂–¥–µ–º',
            'weather_type_210': '–°–ª–∞–±–∞—è –≥—Ä–æ–∑–∞',
            'weather_type_211': '–ì—Ä–æ–∑–∞',
            'weather_type_212': '–°–∏–ª—å–Ω–∞—è –≥—Ä–æ–∑–∞',
            'weather_type_221': '–†–≤–∞–Ω–∞—è –≥—Ä–æ–∑–∞',
            'weather_type_230': '–ì—Ä–æ–∑–∞ —Å –º–µ–ª–∫–æ–π –º–æ—Ä–æ—Å—å—é',
            'weather_type_231': '–ì—Ä–æ–∑–∞ —Å –º–æ—Ä–æ—Å—å—é',
            'weather_type_232': '–ì—Ä–æ–∑–∞ —Å —Å–∏–ª—å–Ω—ã–º –¥–æ–∂–¥–µ–º',
            'weather_type_300': '–°–∏–ª—å–Ω—ã–π –∏–∑–º–æ—Ä–æ—Å—å',
            'weather_type_301': '–ú–æ—Ä–æ—Å—å',
            'weather_type_302': '–°–∏–ª—å–Ω—ã–π –∏–∑–º–æ—Ä–æ—Å—å',
            'weather_type_310': '–ú–æ—Ä–æ—Å—è—â–∏–π –¥–æ–∂–¥—å —Å –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å—é —Å–≤–µ—Ç–∞',
            'weather_type_311': '–ú–æ—Ä–æ—Å—è—â–∏–π –¥–æ–∂–¥—å',
            'weather_type_312': '–°–∏–ª—å–Ω—ã–π –º–æ—Ä–æ—Å—è—â–∏–π –¥–æ–∂–¥—å',
            'weather_type_313': '–õ–∏–≤–µ–Ω—å –∏ –º–æ—Ä–æ—Å—å',
            'weather_type_314': '–°–∏–ª—å–Ω—ã–π –ª–∏–≤–Ω–µ–≤—ã–π –¥–æ–∂–¥—å –∏ –∏–∑–º–æ—Ä–æ—Å—å',
            'weather_type_321': '–ú–æ—Ä–æ—Å—å –ø–æ–¥ –¥–æ–∂–¥–µ–º',
            'weather_type_500': '–ù–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å',
            'weather_type_501': '–£–º–µ—Ä–µ–Ω–Ω—ã–π –¥–æ–∂–¥—å',
            'weather_type_502': '–°–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å',
            'weather_type_503': '–û—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å',
            'weather_type_504': '–°–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å',
            'weather_type_511': '–õ–µ–¥—è–Ω–æ–π –¥–æ–∂–¥—å',
            'weather_type_520': '–°–∏–ª—å–Ω—ã–π –ª–∏–≤–Ω–µ–≤—ã–π –¥–æ–∂–¥—å',
            'weather_type_521': '–õ–∏–≤–µ–Ω—å –ø–æ–¥ –¥–æ–∂–¥–µ–º',
            'weather_type_522': '–°–∏–ª—å–Ω—ã–π –ª–∏–≤–Ω–µ–≤—ã–π –¥–æ–∂–¥—å',
            'weather_type_531': '–†–≤–∞–Ω—ã–π –ª–∏–≤–Ω–µ–≤—ã–π –¥–æ–∂–¥—å',
            'weather_type_600': '–õ–µ–≥–∫–∏–π —Å–Ω–µ–≥',
            'weather_type_601': '–°–Ω–µ–≥',
            'weather_type_602': '–°–∏–ª—å–Ω—ã–π —Å–Ω–µ–≥–æ–ø–∞–¥',
            'weather_type_611': '–ú–æ–∫—Ä—ã–π —Å–Ω–µ–≥',
            'weather_type_612': '–õ—ë–≥–∫–∏–π –¥–æ–∂–¥—å —Å –º–æ–∫—Ä—ã–º —Å–Ω–µ–≥–æ–º',
            'weather_type_613': '–°–Ω–µ–∂–Ω—ã–π –¥–æ–∂–¥—å',
            'weather_type_615': '–ù–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å —Å–æ —Å–Ω–µ–≥–æ–º',
            'weather_type_616': '–î–æ–∂–¥—å –∏ —Å–Ω–µ–≥',
            'weather_type_620': '–õ–µ–≥–∫–∏–π —Å–Ω–µ–≥–æ–ø–∞–¥',
            'weather_type_621': '–°–Ω–µ–≥ –ª–∏–≤–Ω—è',
            'weather_type_622': '–°–∏–ª—å–Ω—ã–π —Å–Ω–µ–≥–æ–ø–∞–¥',
            'weather_type_701': '–¢—É–º–∞–Ω',
            'weather_type_711': '–î—ã–º',
            'weather_type_721': '–î—ã–º–∫–∞',
            'weather_type_731': '–í–∏—Ö—Ä–∏ –ø–µ—Å–∫–∞ –∏ –ø—ã–ª–∏',
            'weather_type_741': '–¢—É–º–∞–Ω',
            'weather_type_751': '–ü–µ—Å–æ–∫',
            'weather_type_761': '–ü—ã–ª—å',
            'weather_type_762': '–í—É–ª–∫–∞–Ω–∏—á–µ—Å–∫–∏–π –ø–µ–ø–µ–ª',
            'weather_type_771': '–®–∫–≤–∞–ª—ã',
            'weather_type_781': '–¢–æ—Ä–Ω–∞–¥–æ',
            'weather_type_800': '–ß–∏—Å—Ç–æ–µ –Ω–µ–±–æ',
            'weather_type_801': '–ú–∞–ª–æ –æ–±–ª–∞–∫–æ–≤: 11-25%',
            'weather_type_802': '–†–∞—Å—Å–µ—è–Ω–Ω—ã–µ –æ–±–ª–∞–∫–∞: 25-50%',
            'weather_type_803': '–†–∞–∑—Ä–æ–∑–Ω–µ–Ω–Ω—ã–µ –æ–±–ª–∞–∫–∞: 51-84%',
            'weather_type_804': '–û–±–ª–∞—á–Ω–æ—Å—Ç—å: 85-100%',
        },
        'en': {
        },
    },
    database=ModuleDatabase(
        schema='CREATE TABLE IF NOT EXISTS users (\n'
               'user_id BIGINT PRIMARY KEY,\n'
               'latitude REAL,\n'
               'longitude REAL,\n'
               'timezone INT\n'
               ');'
    )
)


def wrap_quote(string):
    if ' ' in string:
        return '"' + string + '"'
    return string


GEOCODING_API_ENDPOINT = "http://api.openweathermap.org/geo/1.0/direct"
API_ENDPOINT = "http://api.openweathermap.org/geo/1.0/reverse"
WEATHER_API_ENDPOINT = "https://api.openweathermap.org/data/2.5/onecall"
API_KEY = "eb78e92a555e98fa454b38da71c816c9"


@Client.on_message(
    (filters.regex('^–¥–æ–±—Ä–æ–µ *—É—Ç—Ä–æ', re.IGNORECASE) |
    filters.regex('^–¥–æ–±—Ä—ã–π *–¥–µ–Ω—å', re.IGNORECASE) |
    filters.regex('^–¥–æ–±—Ä—ã–π *–≤–µ—á–µ—Ä', re.IGNORECASE) |
    filters.regex('^–¥–æ–±—Ä–æ–π *–Ω–æ—á–∏', re.IGNORECASE)) &
    ~filters.channel
)
async def good_morning_handler(app, message):
    print(1)
    weather_respond = None
    current_time = None
    if message.from_user:
        user_info = module.database.execute_and_fetch(f'SELECT * FROM users WHERE user_id = {message.from_user.id}')

        print(user_info)
        if not user_info or message.from_user.id in [777000, ]:
            pass
        else:
            user_info = user_info[0]
            request = requests.get(
                API_ENDPOINT,
                params={
                    'lat': user_info[1],
                    'lon': user_info[2],
                    'appid': API_KEY
                }
            )

            units = 'metric'

            weather_request = requests.get(
                WEATHER_API_ENDPOINT,
                params={
                    'lat': user_info[1],
                    'lon': user_info[2],
                    'appid': API_KEY,
                    'exclude': 'daily,hourly,minutely,alerts',
                    'units': units
                }
            )

            if request.status_code != 200 or weather_request.status_code != 200:
                print(request)
                print(weather_request)
            else:
                print(request, weather_request)
                city_info = json.loads(request.text)
                weather_info = json.loads(weather_request.text)
                current_time = datetime.datetime.fromtimestamp(weather_info['current']['dt'] - 10800 + weather_info['timezone_offset'])

                if city_info:
                    city_info = city_info[0]
                    if 'local_names' in city_info:
                        if app.lang_code in city_info['local_names']:
                            city_name = city_info['local_names'][app.lang_code]
                        elif 'en' in city_info['local_names']:
                            city_name = city_info['local_names']['en']
                        else:
                            city_name = next(iter(city_info['local_names'].values()))
                    else:
                        city_name = city_info['name']
                else:
                    city_name = ''

                weather_respond = message.get_string(
                    'today_template',
                    city_name=message.get_string('in_city', city_name=city_name) if city_name else '',
                    emoji=message.get_string('weather_emoji_' + weather_info['current']['weather'][0]['main']),
                    description=message.get_string('weather_type_' + str(weather_info['current']['weather'][0]['id'])),
                    temp_value=round(weather_info['current']['temp'], 1),
                    feels_like_value=round(weather_info['current']['feels_like'], 1),
                    temp_units=message.get_string('units_temp_' + units),
                    wind_value=round(weather_info['current']['wind_speed'], 1),
                    wind_units=message.get_string('units_wind_' + units),
                    direction=message.get_string(
                        'wind_direction_' + str(weather_info['current']['wind_deg'] // 45 * 45)),
                    humidity_value=weather_info['current']['humidity'],
                    clouds_value=weather_info['current']['clouds'],
                )

    is_moscow_time = False
    if not current_time:
        current_time = datetime.datetime.now()
        is_moscow_time = True

    greet_type = 'good_morning'
    if 18 <= current_time.hour:
        greet_type = 'good_evening'
    elif 12 <= current_time.hour < 18:
        greet_type = 'good_afternoon'
    elif current_time.hour < 6:
        greet_type = 'good_night'

    respond = message.get_string(
        greet_type,
        weekday=app.get_core_string('date_weekday_' + str(current_time.isoweekday())),
        day=current_time.day,
        month=app.get_core_string('date_month_' + str(current_time.month)),
        year=current_time.year,
        time_hour=current_time.hour,
        time_minute=str(current_time.minute).zfill(2),
        is_moscow_time=message.get_string('moscow_time') if is_moscow_time else '',
        weather_respond=weather_respond if weather_respond else message.get_string('enter_city')
    )

    await message.reply(respond)


@Client.on_message(filters.command('iamhere'))
async def i_am_here_handler(app, message):
    city_name = ' '.join(message.command[1:])
    if not city_name:
        await message.reply('enter city')
        return

    if re.fullmatch('\d+(\.\d+)? +\d+(\.\d+)?', city_name):
        lat, lon = map(float, city_name.split(' '))


    request = requests.get(
        GEOCODING_API_ENDPOINT,
        params={
            'q': city_name,
            'appid': API_KEY
        }
    )

    if request.status_code != 200:
        print(request)
    else:
        city_info = json.loads(request.text)
        if not city_info:
            await message.reply('city was not found')
            return

        city_info = city_info[0]

        user_info = module.database.execute_and_fetch(f'SELECT * FROM users WHERE user_id = {message.from_user.id}')
        if not user_info:
            module.database.execute(
                f'INSERT INTO users VALUES ({message.from_user.id}, {city_info["lat"]}, {city_info["lon"]}, 0)'
            )
        else:
            module.database.execute(
                f'UPDATE users SET latitude = {city_info["lat"]}, longitude = {city_info["lon"]} '
                f'WHERE user_id = {message.from_user.id}'
            )

        if 'local_names' in city_info:
            if app.lang_code in city_info['local_names']:
                city_name = city_info['local_names'][app.lang_code]
            elif 'en' in city_info['local_names']:
                city_name = city_info['local_names']['en']
            elif city_info['local_names']:
                city_name = next(iter(city_info['local_names'].values()))
            else:
                city_name = city_info['name']
        else:
            city_name = city_info['name']

        await message.reply(
            message.get_string(
                'your_city_was_changed_to',
                city_name=city_name,
                lat=city_info["lat"],
                lon=city_info["lon"]
            )
        )




